package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"strconv"
	"task_manager_app/graph/model"
	"task_manager_app/internal/gen"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.MutationUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input *model.MutationUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.MutationProject) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input *model.MutationProject) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := gen.Q.User.WithContext(ctx).Preload(gen.User.Projects).Find()
	if err != nil {
		return nil, fmt.Errorf("users: %v", err)
	}
	var gqlUsers []*model.User
	for _, u := range users {
		var gqlUserProjects []*model.Project
		for _, p := range u.Projects {
			gqlUserProject := &model.Project{
				ID: string(p.ID),
				Name: p.Name,
				TotalTime: int(p.TotalTime),
				GoalTime: int(p.TotalTime),
				Deadline: p.Deadline,
				IsEngaging: p.IsEngaging,
				StartTime: &p.StartTime,
				UpdatedAt: *p.UpdatedAt,
				DeletedAt: &p.DeletedAt.Time,
			}
			gqlUserProjects = append(gqlUserProjects, gqlUserProject)
		}
		gqlUser := &model.User{
			ID: string(u.ID),
			Name: u.Name,
			CreatedAt: *u.CreatedAt,
			UpdatedAt: *u.UpdatedAt,
			DeletedAt: &u.DeletedAt.Time,
			Projects: gqlUserProjects,
		}
		gqlUsers = append(gqlUsers, gqlUser)
	}
	return gqlUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {	
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("userid is not int: %v", err)
	}
	user, usererr := gen.Q.User.WithContext(ctx).Preload(gen.User.Projects).Where(gen.Q.User.ID.Eq(int64(intId))).First()
	if usererr != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}
	var gqlUserProjects []*model.Project
	for _, p := range user.Projects {
		gqlUserProject := &model.Project{
			ID: string(p.ID),
			Name: p.Name,
			TotalTime: int(p.TotalTime),
			GoalTime: int(p.TotalTime),
			Deadline: p.Deadline,
			IsEngaging: p.IsEngaging,
			StartTime: &p.StartTime,
			UpdatedAt: *p.UpdatedAt,
			DeletedAt: &p.DeletedAt.Time,
		}
		gqlUserProjects = append(gqlUserProjects, gqlUserProject)
	}
	gqlUser := &model.User{
		ID: string(user.ID),
		Name: user.Name,
		CreatedAt: *user.CreatedAt,
		UpdatedAt: *user.UpdatedAt,
		DeletedAt: &user.DeletedAt.Time,
		Projects: gqlUserProjects,
	}
	return gqlUser, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	projects, err := gen.Q.Project.WithContext(ctx).Preload(gen.Project.User).Find()
	if err != nil {
		return nil, fmt.Errorf("projects: %v", err)
	}
	var gqlProjects []*model.Project
	for _, p := range projects {
		gqlProject := &model.Project{
			ID: string(p.ID),
			Name: p.Name,
			TotalTime: int(p.TotalTime),
			GoalTime: int(p.TotalTime),
			Deadline: p.Deadline,
			IsEngaging: p.IsEngaging,
			StartTime: &p.StartTime,
			UpdatedAt: *p.UpdatedAt,
			DeletedAt: &p.DeletedAt.Time,
			User: &model.User{
				ID: string(p.User.ID),
				Name: p.User.Name,
				CreatedAt: *p.User.CreatedAt,
				UpdatedAt: *p.User.UpdatedAt,
				DeletedAt: &p.User.DeletedAt.Time,
			},
		}
		gqlProjects = append(gqlProjects, gqlProject)
	}

	return gqlProjects, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
