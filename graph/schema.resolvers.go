package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"strconv"
	"task_manager_app/graph/model"
	"task_manager_app/internal/gen"
	genmodel "task_manager_app/internal/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.MutationUser) (*model.User, error) {
	var gqlUser *model.User
	err := gen.Q.Transaction(func(tx *gen.Query) error {
		newUser := &genmodel.User{
			Name: input.Name,
		}
		if err := tx.User.Create(newUser); err != nil {
			return err
		}
		gqlUser = &model.User{
			ID:        strconv.Itoa(int(newUser.ID)),
			Name:      newUser.Name,
			CreatedAt: &newUser.CreatedAt,
			UpdatedAt: &newUser.UpdatedAt,
		}
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("createuser cannot create user: %v", err)
	}

	return gqlUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input *model.MutationUser) (*model.User, error) {
	var gqlUser *model.User
	err := gen.Q.Transaction(func(tx *gen.Query) error {
		intId, err := strconv.ParseInt(id, 10, 64)
		if err != nil {
			return err
		}
		user, usererr := tx.User.WithContext(ctx).Where(tx.User.ID.Eq(intId)).Preload(tx.User.Projects).First()
		if usererr != nil {
			return fmt.Errorf("user not found: %w", err)
		}
		user.Name = input.Name
		if err := tx.User.Save(user); err != nil {
			return err
		}
		var gqlUserProjects []*model.Project
		for _, p := range user.Projects {
			gqlUserProject := &model.Project{
				ID:        strconv.Itoa(int(p.ID)),
				Name:      p.Name,
				TotalTime: int(p.TotalTime),
				GoalTime:  int(p.GoalTime),
				Deadline:  p.Deadline,
				CreatedAt: p.CreatedAt,
				UpdatedAt: p.UpdatedAt,
				DeletedAt: &p.DeletedAt.Time,
			}
			gqlUserProjects = append(gqlUserProjects, gqlUserProject)
		}
		gqlUser = &model.User{
			ID:        strconv.Itoa(int(user.ID)),
			Name:      user.Name,
			CreatedAt: &user.CreatedAt,
			UpdatedAt: &user.UpdatedAt,
			Projects:  gqlUserProjects,
		}
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("updateuser cannot update user: %v", err)
	}

	return gqlUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	intId, parseerr := strconv.ParseInt(id, 10, 64)
	if parseerr != nil {
		return false, fmt.Errorf("deleteuser id is not int: %v", parseerr)
	}
	err := gen.Q.Transaction(func(tx *gen.Query) error {
		deleteUser, finderr := tx.User.WithContext(ctx).Where(tx.User.ID.Eq(intId)).Preload(tx.User.Projects).First()
		if finderr != nil {
			return finderr
		}
		result, userDeleteErr := tx.User.Delete(deleteUser)
		if len(deleteUser.Projects) != 0 {
			for _, p := range deleteUser.Projects {
				r, projectDeleteErr := tx.Project.Delete(p)
				if projectDeleteErr != nil {
					return projectDeleteErr
				}
				if r.Error != nil {
					return r.Error
				}
			}
		}
		if userDeleteErr != nil {
			return userDeleteErr
		}
		if result.Error != nil {
			return result.Error
		}
		return nil
	})

	if err != nil {
		return false, fmt.Errorf("deleteuser: %v", err)
	}

	return true, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.MutationProject) (*model.Project, error) {
	fmt.Printf("Received input: %+v", input)
	var gqlProject *model.Project
	err := gen.Q.Transaction(func(tx *gen.Query) error {
		intUserId, parseerr := strconv.ParseInt(input.UserID, 10, 64)
		if parseerr != nil {
			return parseerr
		}
		user, err := tx.User.WithContext(ctx).Where(tx.User.ID.Eq(intUserId)).First()
		if err != nil {
			return err
		}
		newProject := &genmodel.Project{
			Name:     input.Name,
			GoalTime: int64(input.GoalTime),
			Deadline: input.Deadline,
			UserID:   intUserId,
		}
		if err := tx.Project.Create(newProject); err != nil {
			return err
		}
		gqlProject = &model.Project{
			ID:   strconv.Itoa(int(newProject.ID)),
			Name: newProject.Name,
			User: &model.User{
				ID:        strconv.Itoa(int(user.ID)),
				Name:      user.Name,
				CreatedAt: &user.CreatedAt,
				UpdatedAt: &user.UpdatedAt,
			},
			TotalTime: int(newProject.TotalTime),
			GoalTime:  int(newProject.GoalTime),
			Deadline:  newProject.Deadline,
			CreatedAt: newProject.CreatedAt,
			UpdatedAt: newProject.UpdatedAt,
		}
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("createproject cannot create project: %v", err)
	}

	return gqlProject, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input *model.MutationProject) (*model.Project, error) {
	var gqlProject *model.Project
	err := gen.Q.Transaction(func(tx *gen.Query) error {
		intId, parseerr := strconv.ParseInt(id, 10, 64)
		if parseerr != nil {
			return parseerr
		}
		project, err := tx.Project.WithContext(ctx).Where(tx.Project.ID.Eq(intId)).Preload(tx.Project.User).First()
		if err != nil {
			return err
		}
		project.Name = input.Name
		project.TotalTime = int64(input.TotalTime)
		project.GoalTime = int64(input.GoalTime)
		project.Deadline = input.Deadline
		if err := tx.Project.Save(project); err != nil {
			return err
		}
		gqlProject = &model.Project{
			ID:   strconv.Itoa(int(project.ID)),
			Name: project.Name,
			User: &model.User{
				ID:        strconv.Itoa(int(project.User.ID)),
				Name:      project.User.Name,
				CreatedAt: &project.User.CreatedAt,
				UpdatedAt: &project.User.UpdatedAt,
			},
			TotalTime: int(project.TotalTime),
			GoalTime:  int(project.GoalTime),
			Deadline:  project.Deadline,
			CreatedAt: project.CreatedAt,
			UpdatedAt: project.UpdatedAt,
		}
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("updateproject cannot update project: %v", err)
	}

	return gqlProject, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	intId, parseerr := strconv.ParseInt(id, 10, 64)
	if parseerr != nil {
		return false, fmt.Errorf("deleteuser id is not int: %v", parseerr)
	}
	err := gen.Q.Transaction(func(tx *gen.Query) error {
		deleteProject, finderr := tx.Project.WithContext(ctx).Where(tx.Project.ID.Eq(intId)).First()
		if finderr != nil {
			return finderr
		}
		result, projectDeleteErr := tx.Project.Delete(deleteProject)
		if projectDeleteErr != nil {
			return projectDeleteErr
		}
		if result.Error != nil {
			return result.Error
		}
		return nil
	})

	if err != nil {
		return false, fmt.Errorf("deleteproject: %v", err)
	}

	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := gen.Q.User.WithContext(ctx).Preload(gen.User.Projects).Find()
	if err != nil {
		return nil, fmt.Errorf("users: %v", err)
	}
	var gqlUsers []*model.User
	for _, u := range users {
		var gqlUserProjects []*model.Project
		for _, p := range u.Projects {
			gqlUserProject := &model.Project{
				ID:        strconv.Itoa(int(p.ID)),
				Name:      p.Name,
				TotalTime: int(p.TotalTime),
				GoalTime:  int(p.GoalTime),
				Deadline:  p.Deadline,
				CreatedAt: p.CreatedAt,
				UpdatedAt: p.UpdatedAt,
				DeletedAt: &p.DeletedAt.Time,
			}
			gqlUserProjects = append(gqlUserProjects, gqlUserProject)
		}
		gqlUser := &model.User{
			ID:        strconv.Itoa(int(u.ID)),
			Name:      u.Name,
			CreatedAt: &u.CreatedAt,
			UpdatedAt: &u.UpdatedAt,
			DeletedAt: &u.DeletedAt.Time,
			Projects:  gqlUserProjects,
		}
		gqlUsers = append(gqlUsers, gqlUser)
	}
	return gqlUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("userid is not int: %v", err)
	}
	user, usererr := gen.Q.User.WithContext(ctx).Where(gen.Q.User.ID.Eq(int64(intId))).Preload(gen.User.Projects).First()
	if usererr != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}
	var gqlUserProjects []*model.Project
	for _, p := range user.Projects {
		gqlUserProject := &model.Project{
			ID:        strconv.Itoa(int(p.ID)),
			Name:      p.Name,
			TotalTime: int(p.TotalTime),
			GoalTime:  int(p.GoalTime),
			Deadline:  p.Deadline,
			CreatedAt: p.CreatedAt,
			UpdatedAt: p.UpdatedAt,
			DeletedAt: &p.DeletedAt.Time,
		}
		gqlUserProjects = append(gqlUserProjects, gqlUserProject)
	}
	gqlUser := &model.User{
		ID:        strconv.Itoa(int(user.ID)),
		Name:      user.Name,
		CreatedAt: &user.CreatedAt,
		UpdatedAt: &user.UpdatedAt,
		DeletedAt: &user.DeletedAt.Time,
		Projects:  gqlUserProjects,
	}
	return gqlUser, nil
}

// UserByName is the resolver for the userByName field.
func (r *queryResolver) UserByName(ctx context.Context, name *string) (*model.User, error) {
	user, err := gen.Q.User.WithContext(ctx).Preload(gen.User.Projects).FindByName(*name)
	if err != nil {
		return nil, fmt.Errorf("userbyname not found user: %v", err)
	}
	var gqlUserProjects []*model.Project
	for _, p := range user.Projects {
		gqlUserProject := &model.Project{
			ID:        strconv.Itoa(int(p.ID)),
			Name:      p.Name,
			TotalTime: int(p.TotalTime),
			GoalTime:  int(p.GoalTime),
			Deadline:  p.Deadline,
			CreatedAt: p.CreatedAt,
			UpdatedAt: p.UpdatedAt,
			DeletedAt: &p.DeletedAt.Time,
		}
		gqlUserProjects = append(gqlUserProjects, gqlUserProject)
	}
	gqlUser := &model.User{
		ID:        strconv.Itoa(int(user.ID)),
		Name:      user.Name,
		Projects:  gqlUserProjects,
		CreatedAt: &user.CreatedAt,
		UpdatedAt: &user.UpdatedAt,
		DeletedAt: &user.DeletedAt.Time,
	}

	return gqlUser, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	projects, err := gen.Q.Project.WithContext(ctx).Preload(gen.Project.User).Find()
	if err != nil {
		return nil, fmt.Errorf("projects: %v", err)
	}
	var gqlProjects []*model.Project
	for _, p := range projects {
		gqlProject := &model.Project{
			ID:        strconv.Itoa(int(p.ID)),
			Name:      p.Name,
			TotalTime: int(p.TotalTime),
			GoalTime:  int(p.GoalTime),
			Deadline:  p.Deadline,
			CreatedAt: p.CreatedAt,
			UpdatedAt: p.UpdatedAt,
			DeletedAt: &p.DeletedAt.Time,
			User: &model.User{
				ID:        strconv.Itoa(int(p.User.ID)),
				Name:      p.User.Name,
				CreatedAt: &p.User.CreatedAt,
				UpdatedAt: &p.User.UpdatedAt,
				DeletedAt: &p.User.DeletedAt.Time,
			},
		}
		gqlProjects = append(gqlProjects, gqlProject)
	}

	return gqlProjects, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("userid is not int: %v", err)
	}
	project, projecterr := gen.Q.Project.WithContext(ctx).Where(gen.Q.Project.ID.Eq(int64(intId))).Preload(gen.Project.User).First()
	if projecterr != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}
	gqlProject := &model.Project{
		ID:        strconv.Itoa(int(project.ID)),
		Name:      project.Name,
		TotalTime: int(project.TotalTime),
		GoalTime:  int(project.GoalTime),
		Deadline:  project.Deadline,
		CreatedAt: project.CreatedAt,
		UpdatedAt: project.UpdatedAt,
		DeletedAt: &project.DeletedAt.Time,
		User: &model.User{
			ID:        strconv.Itoa(int(project.User.ID)),
			Name:      project.User.Name,
			CreatedAt: &project.User.CreatedAt,
			UpdatedAt: &project.User.UpdatedAt,
			DeletedAt: &project.User.DeletedAt.Time,
		},
	}
	return gqlProject, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
